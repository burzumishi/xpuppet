#!/bin/bash

##########################################
#                                        # 
# XPuppet: Unix System Puppets           #
#                                        # 
# 2014 (c) @burzumishi [ Antonio Cao ]   # 
#                                        # 
##########################################

############
#          #
# Commands #
#          #
############

ECHO=$(which echo);
GREP=$(which grep);
AWK=$(which awk);
SORT=$(which sort);
CAT=$(which cat);
MV=$(which mv);
CP=$(which cp);
MKDIR=$(which mkdir);
DATE=$(which date);

SSH=$(which ssh);
SCP=$(which scp);
RSH=$(which rsh);

#############
#           #
# Constants #
#           #
#############

# TRUE || FALSE

true=0;
false=1;

# SHELL COLORS

color_blk='\e[0;30m'  # Black - Regular
color_red='\e[0;31m'  # Red
color_grn='\e[0;32m'  # Green
color_ylw='\e[0;33m'  # Yellow
color_blu='\e[0;34m'  # Blue
color_pur='\e[0;35m'  # Purple
color_cyn='\e[0;36m'  # Cyan
color_wht='\e[0;37m'  # White

color_bblk='\e[1;30m' # Black - Bold
color_bred='\e[1;31m' # Red
color_bgrn='\e[1;32m' # Green
color_bylw='\e[1;33m' # Yellow
color_bblu='\e[1;34m' # Blue
color_bpur='\e[1;35m' # Purple
color_bcyn='\e[1;36m' # Cyan
color_bwht='\e[1;37m' # White

color_ublk='\e[4;30m' # Black - Underline
color_ured='\e[4;31m' # Red
color_ugrn='\e[4;32m' # Green
color_uylw='\e[4;33m' # Yellow
color_ublu='\e[4;34m' # Blue
color_upur='\e[4;35m' # Purple
color_ucyn='\e[4;36m' # Cyan
color_uwht='\e[4;37m' # White

color_bkblk='\e[40m'  # Black - Background
color_bkred='\e[41m'  # Red
color_bdgrn='\e[42m'  # Green
color_bkylw='\e[43m'  # Yellow
color_bkblu='\e[44m'  # Blue
color_bkpur='\e[45m'  # Purple
color_bkcyn='\e[46m'  # Cyan
color_bkwht='\e[47m'  # White

color_reset='\e[0m'   # Text Reset


##################
#                #
# Color Messages #
#                #
##################

if [ "$COLOR" == "yes" ]; then
	ECHO="$ECHO -e";
	OK="${color_bgrn}OK${color_reset}";
	ERROR="${color_bred}ERROR${color_reset}";
	WARNING="${color_bylw}WARNING${color_reset}";
else
        OK="OK";
        ERROR="ERROR";
        WARNING="WARNING";
fi;

#########################
#                       #
# Define core functions #
#                       #
#########################

function puppet_check_user {
	WHOAMI=$(whoami);

	if [ "$WHOAMI" != "root" ]; then
		$ECHO;
		$ECHO "$ERROR! You must be superuser to run \"xpuppet\"!";
		$ECHO;

		exit $false;
	fi;

	return $true;
}

function puppet_check_error {
	if [[ $1 -eq 1 ]]; then
		puppet_log "$ERROR found!";
		exit $false;
	fi

	return $true;
}

function puppet_check_directory_structure {
        DIRS="$PUPPETS $CACHE $TEMP $DATABASES $PUPPETLOGDIR";

	for dir in $DIRS; do
		if [ ! -d "$dir" ]; then
			$MKDIR -p $dir;	
        		puppet_check_error $?;
		fi;
	done

	return $true;
}

function puppet_log {
	LOGDATE=$($DATE +%Y/%m/%d-%H:%M:%S);
	logmsg="$1";
	
	$ECHO "$LOGDATE $logmsg" >> $PUPPETLOGDIR/$PUPPETLOGFILE
	$ECHO "$logmsg";

	return $true;	
}

function puppet_check_group_name {
	group_name="$1";

	# CHECK PUPPET_NAME (GROUPDB)
	check_group_name=$($GREP -w "$group_name" $GROUPDB);
	if [ "$check_group_name" = "" ]; then
		return $true;
	else
		return $false;
	fi;
}

function puppet_check_node_name {
	group_name="$1";
	node_name="$2";

        # CHECK NODE_NAME (NODEDB)
        check_node_name=$($GREP -w "$group_name $node_name" $NODEDB);
        if [ "$check_node_name" = "" ]; then
		return $true;
        else
		return $false;
        fi;
}

function puppet_check_dir_name {
	group_name="$1";
	dir_name="$2";

        # CHECK DIR (DIRDB)
        check_dir_name=$($GREP -w "$group_name $dir_name" $DIRDB);
        if [ "$check_dir_name" = "" ]; then
		return $true;
	else
		return $false;
        fi;
}

function puppet_check_file_name {
	group_name="$1";
        dir_name="$2";
	file_name="$3";

        # CHECK FILE (FILEDB)
        check_file_name=$($GREP -w "$group_name $dir_name $file_name" $FILEDB);
        if [ "$check_file_name" = "" ]; then
		return $true;
        else
                return $false;
        fi;
}

function puppet_sort_db {
        db="$1";

        $CAT $db | $SORT > ${db}.new;
	puppet_check_error $?;

        $MV ${db}.new $db;
	puppet_check_error $?;
}

function puppet_db_save {
	content="$1";
	db="$2";
	
	$ECHO "$content" >> $db;
	puppet_check_error $?;

	puppet_sort_db $db;
	
	# TODO CHECK SAVE
}

function puppet_db_remove {
        content="$1";
        db="$2";

	$GREP -v "$content" $db > ${db}.new;
	puppet_check_error $?;

	$CP ${db}.new $db;
	puppet_check_error $?;

	puppet_sort_db $db;

	# TODO CHECK REMOVE
}

#############################
#                           #
# Define xpuppet functions  #
#                           #
#############################

function puppet_addgroup {
	group_name="$1";

	if [ "$group_name" = "" ]; then
		puppet_log "$ERROR! New puppet group name is needed!"
		exit $false;
	fi;

	puppet_check_group_name $group_name;

	if [[ $? -eq $true ]]; then
		$MKDIR -p $PUPPETS/$group_name;
		puppet_db_save "$group_name" $GROUPDB;
		puppet_log "$OK! Created $PUPPETS/$group_name structure for puppet $group_name group.";
		return $true;
	else	
		puppet_log "$WARNING! Already exist $PUPPETS/$group_name structure for puppet $group_name group.";
		return $false;
	fi;
} 

function puppet_addnode {
	group_name="$1";
	node_name="$2";

        if [ "$group_name" = "" ]; then
                puppet_log "$ERROR! A registered puppet group name is needed!"
                exit $false;
        fi;

        if [ "$node_name" = "" ]; then
                puppet_log "$ERROR! New puppet node name is needed!"
                exit $false;
        fi;

	puppet_check_node_name $group_name $node_name;
        
	if [[ $? -eq $true ]]; then
		puppet_db_save "$group_name $node_name" $NODEDB;
		puppet_log "$OK! New puppet node $node_name added to $group_name group.";
		return $true;
	else
		puppet_log "$WARNING! Node $node_name is already registered in puppet $group_name group.";
		return $false;
	fi;
}

function puppet_adddir {
	group_name="$1";
	dir_name="$2";

        if [ "$group_name" = "" ]; then
                puppet_log "$ERROR! A registered puppet group name is needed!"
                exit $false;
        fi;

        if [ "$dir_name" = "" ]; then
                puppet_log "$ERROR! A new puppet directory name is needed!"
                exit $false;
        fi;

	puppet_check_dir_name $group_name $dir_name;

	if [[ $? -eq $true ]]; then
		$MKDIR -p $PUPPETS/$group_name/$dir_name
		puppet_db_save "$group_name $dir_name" $DIRDB;
		puppet_log "$OK! New puppet directory $dir_name added to $group_name group.";
		return $true;
        else
                puppet_log "$WARNING! Directory $dir_name is already registered in $group_name group.";
                return $false;
        fi;
}

function puppet_addfile {
        group_name="$1";
	dir_name="$2";
        file_name="$3";

        if [ "$group_name" = "" ]; then
                puppet_log "$ERROR! A registered puppet group name is needed!"
                exit $false;
        fi;

        if [ "$dir_name" = "" ]; then
                puppet_log "$ERROR! A registered directory name is needed!"
                exit $false;
        fi;

        if [ "$file_name" = "" ]; then
                puppet_log "$ERROR! New file name is needed!"
                exit $false;
        fi;

	puppet_check_file_name $group_name $dir_name $file_name;

	if [[ $? -eq $true ]]; then
		# File name without PATH
		puppet_file_name=$($ECHO $file_name | $AWK -F/ '{print $NF}');

		# Copy file 
		$CP -Lfr $file_name $PUPPETS/$group_name/$dir_name/$puppet_file_name
		
        	puppet_db_save "$group_name $dir_name $puppet_file_name" $FILEDB
        	puppet_log "$OK! New puppet file $dir_name/$puppet_file_name added to $group_name group.";
		return $true;
	else
                puppet_log "$WARNING! File $dir_name/$puppet_file_name is already registered in $group_name group.";
                return $false;
        fi;
}

function puppet_delnode {
        group_name="$1";
        node_name="$2";

        if [ "$group_name" = "" ]; then
                puppet_log "$ERROR! A registered puppet group name is needed!"
                exit $false;
        fi;

        if [ "$node_name" = "" ]; then
                puppet_log "$ERROR! New puppet node name is needed!"
                exit $false;
        fi;

        puppet_check_node_name $group_name $node_name;

        if [[ $? -eq $false ]]; then
                puppet_db_remove "$group_name $node_name" $NODEDB;
                puppet_log "$OK! Puppet node $node_name deleted from $group_name group.";
                return $true;
        else
                puppet_log "$WARNING! Node $node_name is already registered in puppet $group_name group.";
                return $false;
        fi;
}

function puppet_list {
	case $1 in
	groups) $ECHO; $ECHO "----------------"; $ECHO "XPuppet [$1]"; $ECHO "----------------"; $ECHO;
	$CAT $GROUPDB | $AWK '{print " * "$0}';
	;;
	nodes) $ECHO; $ECHO "----------------"; $ECHO "XPuppet [$1]"; $ECHO "----------------"; $ECHO;
	$CAT $NODEDB | $AWK '{print " ** "$0}';
	;;
	dirs) $ECHO; $ECHO "----------------"; $ECHO "XPuppet [$1]"; $ECHO "----------------"; $ECHO;
	$CAT $DIRDB | $AWK '{print " *** "$0}';
	;;
	files) $ECHO; $ECHO "----------------"; $ECHO "XPuppet [$1]"; $ECHO "----------------"; $ECHO;
	$CAT $FILEDB | $AWK '{print " **** "$0}';
	;;
	all) $ECHO; $ECHO "----------------"; $ECHO "XPuppet [groups]"; $ECHO "----------------"; $ECHO;
	$CAT $GROUPDB | $AWK '{print " * "$0}';

	$ECHO; $ECHO "----------------"; $ECHO "XPuppet [nodes]"; $ECHO "---------------"; $ECHO;
        $CAT $NODEDB | $AWK '{print " ** "$0}';

	$ECHO; $ECHO "--------------"; $ECHO "XPuppet [dirs]"; $ECHO "---------------"; $ECHO;
        $CAT $DIRDB | $AWK '{print " *** "$0}';

	$ECHO; $ECHO "----------------"; $ECHO "XPuppet [files]"; $ECHO "----------------"; $ECHO;
        $CAT $FILEDB | $AWK '{print " **** "$0}';
	;;
	*) $ECHO "$ERROR! Choose one of these: groups, nodes, dirs, files or all.";
	return $false;
	;;
	esac

        return $true;
}

function puppet_update {
	$ECHO "$WARNING! ALPHA!! Nothing to do! :P";
	return $true;
}


###################################
#                                 #
# Funcion: usage                  #
# Description: Show Xpuppet Help  #
#                                 #
###################################

function puppet_usage {
$ECHO '
Usage XPuppet:

[+++] Admin [add] commands:

xpuppet addgroup [group_name]
xpuppet addnode [group_name] [node_name]
xpuppet adddir [group_name] [dir_name]
xpuppet addfile [group_name] [to_dir_name] [from_file_name]

[---] Admin [del] commands:

xpuppet delgroup [group_name]
xpuppet delnode [group_name] [node_name]
xpuppet deldir [group_name] [dir_name]
xpuppet delfile [group_name] [to_dir_name] [from_file_name]

[***] Manage commands:

xpuppet list [groups] | [nodes] | [dirs] | [files] | [all]
xpuppet update [node_name] | [all]

';
exit $true;
}

