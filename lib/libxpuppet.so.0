#!/bin/bash

##########################################
#                                        # 
# XPuppet: Unix System Puppets           #
#                                        # 
# 2014 (c) @burzumishi [ Antonio Cao ]   # 
#                                        # 
##########################################


##################################
#                                #
# Define Constants               #
#                                #
##################################

# TRUE || FALSE

true=0;
false=1;

# SHELL COLORS

color_blk='\e[0;30m'  # Black - Regular
color_red='\e[0;31m'  # Red
color_grn='\e[0;32m'  # Green
color_ylw='\e[0;33m'  # Yellow
color_blu='\e[0;34m'  # Blue
color_pur='\e[0;35m'  # Purple
color_cyn='\e[0;36m'  # Cyan
color_wht='\e[0;37m'  # White

color_bblk='\e[1;30m' # Black - Bold
color_bred='\e[1;31m' # Red
color_bgrn='\e[1;32m' # Green
color_bylw='\e[1;33m' # Yellow
color_bblu='\e[1;34m' # Blue
color_bpur='\e[1;35m' # Purple
color_bcyn='\e[1;36m' # Cyan
color_bwht='\e[1;37m' # White

color_ublk='\e[4;30m' # Black - Underline
color_ured='\e[4;31m' # Red
color_ugrn='\e[4;32m' # Green
color_uylw='\e[4;33m' # Yellow
color_ublu='\e[4;34m' # Blue
color_upur='\e[4;35m' # Purple
color_ucyn='\e[4;36m' # Cyan
color_uwht='\e[4;37m' # White

color_bkblk='\e[40m'  # Black - Background
color_bkred='\e[41m'  # Red
color_bdgrn='\e[42m'  # Green
color_bkylw='\e[43m'  # Yellow
color_bkblu='\e[44m'  # Blue
color_bkpur='\e[45m'  # Purple
color_bkcyn='\e[46m'  # Cyan
color_bkwht='\e[47m'  # White
color_reset='\e[0m'   # Text Reset


############################
#                          #
# Define basic functions   #
#                          #
############################

function puppet_check_error {
	if [[ $1 -eq 1 ]]; then
		echo "Error found!";
		exit $false;
	fi
}

function puppet_log {
	logmsg="$1";
	
	echo "$date $logmsg" >> $PUPPETLOG
	echo "logmsg";

	return $true;	
}

function puppet_check_group_name {
	group_name="$1";

	# CHECK PUPPET_NAME (GROUPDB)
	check_group_name=$(grep -w "$group_name" $GROUPDB);
	if [ "$check_group_name" = "" ]; then
		return $true;
	else
		return $false;
	fi;
}

function puppet_check_node_name {
	group_name="$1";
	node_name="$2";

        # CHECK NODE_NAME (NODEDB)
        check_node_name=$(grep -w "$group_name $node_name" $NODEDB);
        if [ "$check_node_name" = "" ]; then
		return $true;
        else
		return $false;
        fi;
}

function puppet_check_dir_name {
	group_name="$1";
	dir_name="$2";

        # CHECK DIR (DIRDB)
        check_dir_name=$(grep -w "$group_name $dir_name" $DIRDB);
        if [ "$check_dir_name" = "" ]; then
		return $true;
	else
		return $false;
        fi;
}

function puppet_check_file_name {
	group_name="$1";
        dir_name="$2";
	file_name="$3";

        # CHECK FILE (FILEDB)
        check_file_name=$(grep -w "$group_name $dir_name $file_name" $FILEDB);
        if [ "$check_file_name" = "" ]; then
		return $true;
        else
                return $false;
        fi;
}

function puppet_db_save {
	content="$1";
	db="$2";
	
	echo "$content" >> $db;
	# TODO CHECK SAVE
}

function puppet_db_remove {
        content="$1";
        db="$2";

	grep -v "$content" $db > $TEMP/$db;
	cp $TEMP/$db $db;
	# TODO CHECK REMOVE
}

function puppet_order_db {
	db="$1";

	puppet_log -n "Ordering database items ... ";

	cat $db | sort > ${db}.new;
	mv ${db}.new $db;

	puppet_log "done.";
}

#############################
#                           #
# Define xpuppet functions  #
#                           #
#############################

function puppet_addgroup {
	group_name="$1";

	if [ "$group_name" = "" ]; then
		puppet_log "ERROR! New puppet group name is needed!"
		exit $false;
	fi;

	puppet_check_group_name $group_name;

	if [[ $? -eq $true ]]; then
		mkdir -p $PUPPETS/$group_name;
		puppet_db_save "$group_name" $GROUPDB;
		puppet_log "Created $PUPPETS/$group_name structure for puppet $group_name group.";
		puppet_order_db $GROUPDB;
		return $true;
	else	
		puppet_log "Already exist $PUPPETS/$group_name structure for puppet $group_name group.";
		return $false;
	fi;
} 

function puppet_addnode {
	group_name="$1";
	node_name="$2";

        if [ "$group_name" = "" ]; then
                puppet_log "ERROR! A registered puppet group name is needed!"
                exit $false;
        fi;

        if [ "$node_name" = "" ]; then
                puppet_log "ERROR! New puppet node name is needed!"
                exit $false;
        fi;

	puppet_check_node_name $group_name $node_name;
        
	if [[ $? -eq $true ]]; then
		puppet_db_save "$group_name $node_name" $NODEDB;
		puppet_log "New puppet node $node_name added to $group_name group.";
		puppet_order_db $NODEDB;
		return $true;
	else
		puppet_log "Node $node_name is already registered in puppet $group_name group.";
		return $false;
	fi;
}

function puppet_adddir {
	group_name="$1";
	dir_name="$2";

        if [ "$group_name" = "" ]; then
                puppet_log "ERROR! A registered puppet group name is needed!"
                exit $false;
        fi;

        if [ "$dir_name" = "" ]; then
                puppet_log "ERROR! A new puppet directory name is needed!"
                exit $false;
        fi;

	puppet_check_dir_name $group_name $dir_name;

	if [[ $? -eq $true ]]; then
		mkdir -p $PUPPETS/$group_name/$dir_name
		puppet_db_save "$group_name $dir_name" $DIRDB;
		puppet_log "New puppet directory $dir_name added to $group_name group.";
		puppet_order_db $DIRDB;
		return $true;
        else
                puppet_log "Directory $dir_name is already registered in $group_name group.";
                return $false;
        fi;
}

function puppet_addfile {
        group_name="$1";
	dir_name="$2";
        file_name="$3";

        if [ "$group_name" = "" ]; then
                puppet_log "ERROR! A registered puppet group name is needed!"
                exit $false;
        fi;

        if [ "$dir_name" = "" ]; then
                puppet_log "ERROR! A registered directory name is needed!"
                exit $false;
        fi;

        if [ "$file_name" = "" ]; then
                puppet_log "ERROR! New file name is needed!"
                exit $false;
        fi;

	puppet_check_file_name $group_name $dir_name $file_name;

	if [[ $? -eq $true ]]; then
		# File name without PATH
		puppet_file_name=$(echo $file_name | awk -F/ '{print $NF}');

		# Copy file 
		cp -Lfr $file_name $PUPPETS/$group_name/$dir_name/$puppet_file_name
		
        	puppet_db_save "$group_name $dir_name $puppet_file_name" $FILEDB
        	puppet_log "New puppet file $dir_name/$puppet_file_name added to $group_name group.";
		puppet_order_db $FILEDB;
		return $true;
	else
                puppet_log "File $dir_name/$puppet_file_name is already registered in $group_name group.";
                return $false;
        fi;
}

function puppet_delnode {
        group_name="$1";
        node_name="$2";

        if [ "$group_name" = "" ]; then
                puppet_log "ERROR! A registered puppet group name is needed!"
                exit $false;
        fi;

        if [ "$node_name" = "" ]; then
                puppet_log "ERROR! New puppet node name is needed!"
                exit $false;
        fi;

        puppet_check_node_name $group_name $node_name;

        if [[ $? -eq $false ]]; then
                puppet_db_remove "$group_name $node_name" $NODEDB;
                puppet_log "Puppet node $node_name deleted from $group_name group.";
		puppet_order_db $NODEDB;
                return $true;
        else
                puppet_log "Node $node_name is already registered in puppet $group_name group.";
                return $false;
        fi;
}

function puppet_list {
	case $1 in
	groups) echo; echo "----------------"; echo "XPuppet [$1]"; echo "----------------"; echo;
	cat $GROUPDB | awk '{print " * "$0}';
	;;
	nodes) echo; echo "----------------"; echo "XPuppet [$1]"; echo "----------------"; echo;
	cat $NODEDB | awk '{print " ** "$0}';
	;;
	dirs) echo; echo "----------------"; echo "XPuppet [$1]"; echo "----------------"; echo;
	cat $DIRDB | awk '{print " *** "$0}';
	;;
	files) echo; echo "----------------"; echo "XPuppet [$1]"; echo "----------------"; echo;
	cat $FILEDB | awk '{print " **** "$0}';
	;;
	all) echo; echo "----------------"; echo "XPuppet [groups]"; echo "----------------"; echo;
	cat $GROUPDB | awk '{print " * "$0}';

	echo; echo "----------------"; echo "XPuppet [nodes]"; echo "---------------"; echo;
        cat $NODEDB | awk '{print " ** "$0}';

	echo; echo "--------------"; echo "XPuppet [dirs]"; echo "---------------"; echo;
        cat $DIRDB | awk '{print " *** "$0}';

	echo; echo "----------------"; echo "XPuppet [files]"; echo "----------------"; echo;
        cat $FILEDB | awk '{print " **** "$0}';
	;;
	*) echo "Error! Choose one of these: groups, nodes, dirs, files or all.";
	return $false;
	;;
	esac

        return $true;
}

function puppet_update {
	echo "ALPHA!! Nothing to do! :P";
	return $true;
}


###################################
#                                 #
# Funcion: usage                  #
# Description: Show Xpuppet Help  #
#                                 #
###################################

function puppet_usage {
echo '
Usage XPuppet:

[+++] Admin [add] commands:

xpuppet addgroup [group_name]
xpuppet addnode [group_name] [node_name]
xpuppet adddir [group_name] [dir_name]
xpuppet addfile [group_name] [to_dir_name] [from_file_name]

[---] Admin [del] commands:

xpuppet delgroup [group_name]
xpuppet delnode [group_name] [node_name]
xpuppet deldir [group_name] [dir_name]
xpuppet delfile [group_name] [to_dir_name] [from_file_name]

[***] Manage commands:

xpuppet list [groups] | [nodes] | [dirs] | [files] | [all]
xpuppet update [node_name] | [all]

';
exit $true;
}

